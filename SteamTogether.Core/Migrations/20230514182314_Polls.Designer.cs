// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamTogether.Core.Context;

#nullable disable

namespace SteamTogether.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230514182314_Polls")]
    partial class Polls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("SteamGameSteamCategory", b =>
                {
                    b.Property<uint>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SteamGameSteamCategory");
                });

            modelBuilder.Entity("SteamPlayerSteamGame", b =>
                {
                    b.Property<ulong>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("SteamPlayerSteamGame");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.SteamGame", b =>
                {
                    b.Property<uint>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSyncDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("SteamAppId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId");

                    b.ToTable("SteamGames");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.SteamGameCategory", b =>
                {
                    b.Property<uint>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("SteamGamesCategories");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.SteamPlayer", b =>
                {
                    b.Property<ulong>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSyncDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.ToTable("SteamPlayers");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramChatParticipant", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("SteamPlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChatId", "TelegramUserId", "SteamPlayerId");

                    b.HasIndex("SteamPlayerId");

                    b.HasIndex("ChatId", "SteamPlayerId");

                    b.HasIndex("ChatId", "TelegramUserId");

                    b.ToTable("TelegramChatParticipants");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramPoll", b =>
                {
                    b.Property<string>("PollId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PollId");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.ToTable("TelegramPolls");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramPollVote", b =>
                {
                    b.Property<int>("PollVoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PollId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PollVoteId");

                    b.HasIndex("PollId");

                    b.HasIndex("PollId", "TelegramUserId")
                        .IsUnique();

                    b.ToTable("TelegramPollVotes");
                });

            modelBuilder.Entity("SteamGameSteamCategory", b =>
                {
                    b.HasOne("SteamTogether.Core.Models.SteamGameCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamTogether.Core.Models.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamPlayerSteamGame", b =>
                {
                    b.HasOne("SteamTogether.Core.Models.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamTogether.Core.Models.SteamPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramChatParticipant", b =>
                {
                    b.HasOne("SteamTogether.Core.Models.SteamPlayer", "SteamPlayer")
                        .WithMany()
                        .HasForeignKey("SteamPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SteamPlayer");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramPollVote", b =>
                {
                    b.HasOne("SteamTogether.Core.Models.TelegramPoll", "TelegramPoll")
                        .WithMany("TelegramPollVotes")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramPoll");
                });

            modelBuilder.Entity("SteamTogether.Core.Models.TelegramPoll", b =>
                {
                    b.Navigation("TelegramPollVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
